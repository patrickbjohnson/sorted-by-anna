/*-----------------------------------------------------------------------------
 *-----------------------------------------------------------------------------
 *
 * MIXINS
 *
 * Define any custom site-wide mixins below. These should only be
 * mixins that are global in scope and that need to be referenced
 * by multiple SASS files.
 *
 *-----------------------------------------------------------------------------
 *----------------------------------------------------------------------------- */

/**
 * Basic Clearfix - pulled from Bourbon.io
 */
@mixin clearfix {
    &:after {
        clear: both;
        content: "";
        display: table;
    }
}

/**
 * Vertical Centering
 * $position: variable to set position value, Defaults to relative.
 *
 */
@mixin vertically-centered($position: relative) {
    position: $position;
    top: 50%;
    transform: translateY(-50%);
}

/**
 * Vertical Centering
 * $position: variable to set position value, Defaults to relative.
 *
 */
@mixin centered($position: relative) {
    position: $position;
    top: 50%;
    left: 50%;
    transform: translateY(-50%) translateX(-50%);
}

/**
 * Creates an intrinsic ratio container. Useful for videos and elements that
 * you want to scale proportionately.
 *
 * @type {string} $child-selector A string selector targeting the child element that
 *                                 you want to scale
 * @type {int} $width The width component of the aspect ratio
 * @type {int} $height The height component of the aspect ratio
 */
@mixin intrinsic-ratio($child-selector, $width: 16, $height: 9) {
    position: relative;
    height: 0;
    padding-bottom: percentage($height / $width);

    #{$child-selector} {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
}

@mixin ul-reset() {
    padding: 0;
    margin: 0;
    list-style: none;
}


@mixin page-container() {
    @if $is-responsive {
        max-width: $page-container-width;
    } @else {
        width: $page-container-width;
    }

    padding-right: $page-container-padding;
    padding-left: $page-container-padding;
    margin-left: auto;
    margin-right: auto;
}


// Any use of !important is to ensure
// it overrides Gravity Forms default styles
// which are grossly too generic and greedy
@mixin form-control {
    position: relative;
    display: inline-block;
    width: 100% !important;
    height: 38px;
    border: 0;
    outline: 0;
    padding-top: 10px !important;
    padding-bottom: 10px !important;
    padding-left: 10px !important;
    padding-right: 10px !important;
    box-sizing: border-box;
    background-color: color(white);
    border-radius: 3px;
    line-height: 1;
    font-size: rem(14) !important;
    border: 1px solid color(robin);

    &:focus,
    &:active {
      color: black;

      &::-webkit-input-placeholder { /* Chrome/Opera/Safari */
        color: black;
        transition: color .250s ease-out;
      }

      &::-moz-placeholder { /* Firefox 19+ */
        color: black;
        transition: color .250s ease-out;
      }

      &:-ms-input-placeholder { /* IE 10+ */
        color: black;
        transition: color .250s ease-out;
      }

      &:-moz-placeholder { /* Firefox 18- */
        color: black;
        transition: color .250s ease-out;
      }
    }

    &::-webkit-input-placeholder { /* Chrome/Opera/Safari */
      font-size: rem(13);
      color: red;
      text-transform: uppercase;
    }

    &::-moz-placeholder { /* Firefox 19+ */
      font-size: rem(13);
      color: red;
      text-transform: uppercase;
    }

    &:-ms-input-placeholder { /* IE 10+ */
      font-size: rem(13);
      color: red;
      text-transform: uppercase;
    }

    &:-moz-placeholder { /* Firefox 18- */
      font-size: rem(13);
      color: red;
      text-transform: uppercase;
    }
}
